
"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import  Config, RepositoryEnv
import dj_database_url
import os

from pathlib import Path

# Explicitly load .env file
env_file = Path("../.env")
if env_file.exists():
    config = Config(RepositoryEnv(env_file))
else:
    from decouple import config


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Simple environment loading - python-decouple handles .env files automatically


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-auua#syshft84*v=2_mw^=jp@%6e7yb451)u5^3wxs655s8tn3')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda x: x.split(','))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

     # Third-party
    'rest_framework',
    'corsheaders',
    'django_ratelimit',

    # Local
    'trips',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database Configuration
# Use DATABASE_URL if available (for production), otherwise use SQLite (for development)
if os.environ.get('DATABASE_URL'):
    # Production database (PostgreSQL from Render/Railway)
    DATABASES = {
        'default': dj_database_url.config(
            conn_max_age=600,
            ssl_require=True,
            conn_health_checks=True
        )
    }
else:
    # Development database (SQLite)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# API Keys and Configuration
ORS_API_KEY = config("ORS_API_KEY", default="")

# Debug what API key Django is actually loading
#print(f"DEBUG: ORS_API_KEY loaded as: '{ORS_API_KEY}'")
#print(f"DEBUG: Is placeholder? {ORS_API_KEY == 'your_openrouteservice_api_key_here'}")

# Cache configuration for route calculations
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config('REDIS_URL', default='redis://127.0.0.1:6379/0'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'trip_logger',
        'TIMEOUT': 3600,  # 1 hour cache timeout
    }
}

# Rate limiting configuration
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_ENABLE = True

# OpenRouteService API configuration
ORS_BASE_URL = "https://api.openrouteservice.org/v2"
ORS_RATE_LIMIT = 2000  # requests per day (free tier)

# CORS Configuration
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=True, cast=bool)

if not CORS_ALLOW_ALL_ORIGINS:
    CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='http://localhost:3000,http://localhost:5173', cast=lambda x: x.split(','))

# Production-specific settings
if 'RENDER' in os.environ:
    DEBUG = False
    SECRET_KEY = os.environ.get('SECRET_KEY', SECRET_KEY)
    ALLOWED_HOSTS = [os.environ.get('RENDER_EXTERNAL_HOSTNAME', 'localhost'), '127.0.0.1']

    # Static files for production
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    # Add WhiteNoise middleware for static files
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

    # CORS for production - use environment variable if set
    if not CORS_ALLOW_ALL_ORIGINS and 'CORS_ALLOWED_ORIGINS' in os.environ:
        # Use the environment variable (already parsed above)
        pass  # CORS_ALLOWED_ORIGINS already set from config
    else:
        # Fallback to default origins
        CORS_ALLOWED_ORIGINS = [
            f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME', 'localhost')}",
            "http://localhost:3000",
            "http://localhost:5173",
        ]